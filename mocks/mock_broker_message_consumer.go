// Code generated by MockGen. DO NOT EDIT.
// Source: fiap-fast-food-ms-producao/adapter/worker_manager (interfaces: BrokerMessageConsumer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBrokerMessageConsumer is a mock of BrokerMessageConsumer interface
type MockBrokerMessageConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMessageConsumerMockRecorder
}

// MockBrokerMessageConsumerMockRecorder is the mock recorder for MockBrokerMessageConsumer
type MockBrokerMessageConsumerMockRecorder struct {
	mock *MockBrokerMessageConsumer
}

// NewMockBrokerMessageConsumer creates a new mock instance
func NewMockBrokerMessageConsumer(ctrl *gomock.Controller) *MockBrokerMessageConsumer {
	mock := &MockBrokerMessageConsumer{ctrl: ctrl}
	mock.recorder = &MockBrokerMessageConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrokerMessageConsumer) EXPECT() *MockBrokerMessageConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method
func (m *MockBrokerMessageConsumer) Consume() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consume")
}

// Consume indicates an expected call of Consume
func (mr *MockBrokerMessageConsumerMockRecorder) Consume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockBrokerMessageConsumer)(nil).Consume))
}

// Produce mocks base method
func (m *MockBrokerMessageConsumer) Produce(arg0 map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Produce", arg0)
}

// Produce indicates an expected call of Produce
func (mr *MockBrokerMessageConsumerMockRecorder) Produce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockBrokerMessageConsumer)(nil).Produce), arg0)
}
