name: Build Deploy

on:
  workflow_dispatch:
  push:
    branches: 
      - "main"

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest # specify the build machine
    steps:
      - # checkout to the repository on the build machine
        name: Checkout
        uses: actions/checkout@v3
      - # Login into AWS
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - # Login into Amazon ECR
        name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - # create a build kit builder instance
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - # Build the docker image to push to ECR
        name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker build -t fiap-tech-go .
          docker tag ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/productions:latest
          docker push ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/productions:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy Microservice on K8S
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.TARGET_REPO_PAT }}
          repository: FIAP-6SOAT-G10/fiap-fast-food-ms-producao-k8s
          event-type: trigger-deploy

  coverage:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.21' # Specify your Go version

        - name: Run tests and generate coverage report
          run: |
            go tool cover -func=coverage.out | grep total | awk '{print "Average Coverage:", $3}'

